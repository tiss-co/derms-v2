"""empty message

Revision ID: 7fb75948ac83
Revises: 744cc6f867a8
Create Date: 2023-02-12 04:18:24.588565

"""
from alembic import op
import sqlalchemy as sa

# (help: https://alembic.sqlalchemy.org/en/latest/autogenerate.html#controlling-the-module-prefix)
# (help: https://stackoverflow.com/a/34294464)
import backend

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7fb75948ac83'
down_revision = '744cc6f867a8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('battery',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('component_id', sa.Integer(), nullable=False),
    sa.Column('battery_type', sa.String(), nullable=False),
    sa.Column('soc_max', sa.Float(), nullable=False),
    sa.Column('soc_min', sa.Float(), nullable=False),
    sa.Column('p_max', sa.Float(), nullable=False),
    sa.Column('p_charge_max', sa.Float(), nullable=False),
    sa.Column('feeder_max', sa.Float(), nullable=False),
    sa.Column('charging_margin', sa.Float(), nullable=False),
    sa.Column('morning_start_time', sa.Integer(), nullable=False),
    sa.Column('morning_end_time', sa.Integer(), nullable=False),
    sa.Column('night_start_time', sa.Integer(), nullable=False),
    sa.Column('night_end_time', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_battery'))
    )
    op.create_table('program',
    sa.Column('id', sa.BigInteger().with_variant(sa.INTEGER(), 'sqlite'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('battery_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_global', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['battery_id'], ['battery.id'], name=op.f('fk_program_battery_id_battery')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_program'))
    )
    op.add_column('activations', sa.Column('program_id', sa.Integer(), nullable=False))
    op.add_column('activations', sa.Column('is_manual', sa.Boolean(), server_default='false', nullable=False))
    op.drop_index('ix_activations_uuid', table_name='activations')
    op.drop_constraint('uq_activations_date', 'activations', type_='unique')
    op.create_unique_constraint(op.f('uq_activations_date'), 'activations', ['date', 'program_id'])
    op.create_foreign_key(op.f('fk_activations_program_id_program'), 'activations', 'program', ['program_id'], ['id'])
    op.drop_column('activations', 'manual')
    op.drop_column('activations', 'name')
    op.drop_column('activations', 'uuid')
    op.add_column('alarms', sa.Column('battery_id', sa.Integer(), nullable=False))
    op.drop_index('ix_alarms_uuid', table_name='alarms')
    op.create_foreign_key(op.f('fk_alarms_battery_id_battery'), 'alarms', 'battery', ['battery_id'], ['id'])
    op.drop_column('alarms', 'uuid')
    op.add_column('battery_details', sa.Column('battery_id', sa.Integer(), nullable=False))
    op.drop_index('ix_battery_details_uuid', table_name='battery_details')
    op.create_foreign_key(op.f('fk_battery_details_battery_id_battery'), 'battery_details', 'battery', ['battery_id'], ['id'])
    op.drop_column('battery_details', 'uuid')
    op.add_column('load', sa.Column('component_id', sa.Integer(), nullable=False))
    op.drop_index('ix_load_uuid', table_name='load')
    op.drop_column('load', 'uuid')
    op.add_column('manual_load', sa.Column('component_id', sa.Integer(), nullable=False))
    op.drop_index('ix_manual_load_uuid', table_name='manual_load')
    op.drop_column('manual_load', 'uuid')
    op.add_column('power_quality', sa.Column('battery_id', sa.Integer(), nullable=False))
    op.drop_index('ix_power_quality_uuid', table_name='power_quality')
    op.create_foreign_key(op.f('fk_power_quality_battery_id_battery'), 'power_quality', 'battery', ['battery_id'], ['id'])
    op.drop_column('power_quality', 'uuid')
    op.add_column('results', sa.Column('battery_id', sa.Integer(), nullable=False))
    op.add_column('results', sa.Column('soc', sa.Float(), nullable=False))
    op.drop_index('ix_results_uuid', table_name='results')
    op.create_foreign_key(op.f('fk_results_battery_id_battery'), 'results', 'battery', ['battery_id'], ['id'])
    op.drop_column('results', 'real_soc')
    op.drop_column('results', 'limited_soc')
    op.drop_column('results', 'charging_mode')
    op.drop_column('results', 'uuid')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('results', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.add_column('results', sa.Column('charging_mode', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('results', sa.Column('limited_soc', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('results', sa.Column('real_soc', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_results_battery_id_battery'), 'results', type_='foreignkey')
    op.create_index('ix_results_uuid', 'results', ['uuid'], unique=False)
    op.drop_column('results', 'soc')
    op.drop_column('results', 'battery_id')
    op.add_column('power_quality', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_power_quality_battery_id_battery'), 'power_quality', type_='foreignkey')
    op.create_index('ix_power_quality_uuid', 'power_quality', ['uuid'], unique=False)
    op.drop_column('power_quality', 'battery_id')
    op.add_column('manual_load', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.create_index('ix_manual_load_uuid', 'manual_load', ['uuid'], unique=False)
    op.drop_column('manual_load', 'component_id')
    op.add_column('load', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.create_index('ix_load_uuid', 'load', ['uuid'], unique=False)
    op.drop_column('load', 'component_id')
    op.add_column('battery_details', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_battery_details_battery_id_battery'), 'battery_details', type_='foreignkey')
    op.create_index('ix_battery_details_uuid', 'battery_details', ['uuid'], unique=False)
    op.drop_column('battery_details', 'battery_id')
    op.add_column('alarms', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_alarms_battery_id_battery'), 'alarms', type_='foreignkey')
    op.create_index('ix_alarms_uuid', 'alarms', ['uuid'], unique=False)
    op.drop_column('alarms', 'battery_id')
    op.add_column('activations', sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.add_column('activations', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('activations', sa.Column('manual', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_activations_program_id_program'), 'activations', type_='foreignkey')
    op.drop_constraint(op.f('uq_activations_date'), 'activations', type_='unique')
    op.create_unique_constraint('uq_activations_date', 'activations', ['date', 'name'])
    op.create_index('ix_activations_uuid', 'activations', ['uuid'], unique=False)
    op.drop_column('activations', 'is_manual')
    op.drop_column('activations', 'program_id')
    op.drop_table('program')
    op.drop_table('battery')
    # ### end Alembic commands ###
